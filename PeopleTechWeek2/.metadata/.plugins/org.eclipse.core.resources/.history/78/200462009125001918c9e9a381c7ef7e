import java.time.LocalDate;
import java.util.Comparator;
import java.util.PriorityQueue;

class Employee implements Comparable<Employee>{
	
	private Long id;
	private String name;
	private LocalDate dob;
	
	public Employee(Long id, String name, LocalDate dob) {
		super();
		this.id = id;
		this.name = name;
		this.dob = dob;
	}
	
	@Override
	public int compareTo(Employee emp) {
		return this.getId().compareTo(emp.getId());
	}
	
	public String getName() {
		return name;
	}
	public Long getId() {
		return id;
	}
	
	public String toString() {
		return "Employee [id=" + id + ", name="+ name+ ", dob=" + dob + "]";
	}
}




public class ExcersizePriorityQueue {
	public static void main(String[] args) {
		//Comparator<Employee> nameSorter = Comparator.comparing(Employee::getName);
		
		//PriorityQueue<Employee> priorityQueue = new PriorityQueue<>(nameSorter);
		
		PriorityQueue<Employee> priorityQueue = new PriorityQueue<>();

		priorityQueue.add(new Employee(1l, "AAA", LocalDate.now()));
		priorityQueue.add(new Employee(4l, "CCC", LocalDate.now()));
		priorityQueue.add(new Employee(5l, "DDD", LocalDate.now()));
		priorityQueue.add(new Employee(2l, "BBB", LocalDate.now()));
		priorityQueue.add(new Employee(6l, "FFF", LocalDate.now()));
		
		priorityQueue.add(new Employee(3l, "EEE", LocalDate.now()));
		
		while(true) {
			Employee e = priorityQueue.poll();
			System.out.println(e);
			if(e == null) break;
		}
		
		
	}

}
