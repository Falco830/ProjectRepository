


public class BinaryTree {

	
	static Node root;
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Node nd = new Node(23);
		 nd = new Node(23);
		 nd = new Node(23);
		 nd = new Node(23);
		BinaryTree bt = new BinaryTree();
		bt.addNodeToNode(new Node(23));
		bt.addNodeToNode(new Node(20));
		bt.addNodeToNode(new Node(13));
		bt.addNodeToNode(new Node(15));
		//bt.addNodeToNode(new Node(43));

        System.out.println("Preorder traversal of binary tree is "); 
        bt.printPreorder(root); 
  
        System.out.println("\nInorder traversal of binary tree is "); 
        bt.printInorder(root); 
  
        System.out.println("\nPostorder traversal of binary tree is "); 
        bt.printPostorder(root); 
		System.out.println();
	}
	
	private Node addNodeToNode(Node current) {
			
		
		Node temp = root;
		if(temp != null) {
			while(temp.value != 0) {
				if(temp.value > current.value) {
					if(temp.left != null) {
						temp = temp.left;
						break;
					}
						temp.left = current;
						System.out.println(temp.left);
						return temp.left;
					
				}else {
					if(temp.right != null) {
						temp = temp.right;
						break;
					}
						temp.right = current;
						return temp.right;					
				}
			}
		}else {
			root = current;		//if no root exists create new one
		}

		return current;
	}
	void printPostorder(Node node) 
    { 
        if (node == null) 
            return; 
  
        // first recur on left subtree 
        printPostorder(node.left); 
  
        // then recur on right subtree 
        printPostorder(node.right); 
  
        // now deal with the node 
        System.out.print(node.value + " "); 
    } 
  
    /* Given a binary tree, print its nodes in inorder*/
    void printInorder(Node node) 
    { 
        if (node == null) 
            return; 
  
        /* first recur on left child */
        printInorder(node.left); 
  
        /* then print the data of node */
        System.out.print(node.value + " "); 
  
        /* now recur on right child */
        printInorder(node.right); 
    } 
  
    /* Given a binary tree, print its nodes in preorder*/
    void printPreorder(Node node) 
    { 
        if (node == null) 
            return; 
  
        /* first print data of node */
        System.out.print(node.value + " "); 
  
        /* then recur on left sutree */
        printPreorder(node.left); 
  
        /* now recur on right subtree */
        printPreorder(node.right); 
    } 

}
